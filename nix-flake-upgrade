#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<EOF
Usage: $(basename "$0") [--update-lock-file] [--result-dir <path>] [--os] [--home] [--push] [<FLAKE_DIR>] [-- <EXTRA_ARGS>...]

Options:
  --update-lock-file  Bump flake.lock and commit
  --os                Build NixOS
  --home              Build Home-Manager
  --push              git pull --rebase && git push
  --result-dir <path> Write outputs into <path>
  -- <EXTRA_ARGS>     Passed to nix build
EOF
  exit 1
}

RESULT_DIR=
FLAKE_DIR=.
UPDATE_LOCK=false
DO_OS=false
DO_HOME=false
DO_PUSH=false
OS_ONLY_WHEN_CHANGED=false
EXTRA_ARGS=()

while [[ $# -gt 0 ]]; do
  case "$1" in
  --)
    shift
    EXTRA_ARGS=("$@")
    break
    ;;
  --update-lock-file)
    UPDATE_LOCK=true
    shift
    ;;
  --os)
    DO_OS=true
    shift
    ;;
  --home)
    DO_HOME=true
    shift
    ;;
  --push)
    DO_PUSH=true
    shift
    ;;
  --os-only-when-changed)
    OS_ONLY_WHEN_CHANGED=true
    shift
    ;;
  --result-dir)
    RESULT_DIR="$2"
    shift 2
    ;;
  --help)
    usage
    ;;
  -*)
    echo "Unknown option: $1" >&2
    usage
    ;;
  *)
    if [[ "$FLAKE_DIR" == "." ]]; then
      FLAKE_DIR="$1"
      shift
    else
      echo "Unexpected argument: $1" >&2
      usage
    fi
    ;;
  esac
done

# Default to both if neither specified
if ! $DO_OS && ! $DO_HOME; then
  DO_OS=true
  DO_HOME=true
fi

cd "$FLAKE_DIR"

# Assert that git notes is configured
if ! grep -Fq 'refs/notes/' "$(git rev-parse --git-path config)"; then
  echo "Error: git notes not configured for repository. Check the Readme." >&2
  exit 1
fi

if $UPDATE_LOCK; then
  PREV_COMMIT_HASH=$(git rev-parse HEAD)

  echo "Updating flake.lock..."
  nix flake update --commit-lock-file

  LOCK_COMMIT_HASH=$(git rev-parse HEAD)
  LOCK_BODY=$(git log -1 --pretty=%b "$LOCK_COMMIT_HASH")

  if [[ "$PREV_COMMIT_HASH" = "$LOCK_COMMIT_HASH" ]]; then
    echo "flake.lock did not change."
  else
    # Build concise subject like: chore(<host>,os,home): update path/to/flake.lock
    PREFIX=$(git rev-parse --show-prefix)
    if [[ -n "$PREFIX" ]]; then
      REL_PATH="${PREFIX%/}/flake.lock"
    else
      REL_PATH="flake.lock"
    fi

    labels=("$(hostname)")
    if [ "$DO_OS" = true ]; then
      labels+=("os")
    fi
    if [ "$DO_HOME" = true ]; then
      labels+=("home")
    fi

    TITLE="chore($(
      IFS=,
      echo "${labels[*]}"
    )): update ${REL_PATH}"

    # Update title and author of the commit and only commit flake.lock changes.
    echo "Amending git commit with generated author and title..."
    git reset --soft "$PREV_COMMIT_HASH"
    git add flake.lock
    git commit --only flake.lock --author="$(hostname)[bot] <$(hostname)[bot]>" -m "$TITLE" -m "$LOCK_BODY"
    LOCK_COMMIT_HASH="$(git rev-parse HEAD)"
  fi
fi

if [ -z "$RESULT_DIR" ]; then
  RESULT_DIR=$(mktemp -d)
  trap 'rm -rf "$RESULT_DIR"' EXIT
fi

if $DO_OS; then
  echo "nh os build..."
  nh os build "$FLAKE_DIR" --out-link "$RESULT_DIR/os-result" -- "${EXTRA_ARGS[@]}"
  OS_CURRENT=$(realpath /run/current-system)
  OS_NEW=$(realpath "$RESULT_DIR/os-result")
fi

if $DO_HOME; then
  echo "nh home build..."
  nh home build "$FLAKE_DIR" --out-link "$RESULT_DIR/home-result" -- "${EXTRA_ARGS[@]}"
  HOME_CURRENT=$(realpath "${XDG_STATE_HOME:-$HOME/.local/state}/nix/profiles/profile")
  HOME_NEW=$(realpath "$RESULT_DIR/home-result")
fi

function check_os_change() {
  # We could also look for string "No version or selection state changes." for the first case
  # Best case nvd would have a json option though
  line_count=$(tail -n +3 "$1" | wc -l | awk '{print $1}')
  if [ "$line_count" -eq 2 ] || ([ "$line_count" -eq 3 ] && tail -n +3 "$1" | grep -q nixos-system-); then
    return 0
  else
    return 1
  fi
}

# Build diffs and create a git note with details (flake.lock body + closure diffs)
if $UPDATE_LOCK && [[ "$PREV_COMMIT_HASH" != "$LOCK_COMMIT_HASH" ]]; then
  echo "Generating diffs..."
  if $DO_OS; then
    nvd diff "$OS_CURRENT" "$OS_NEW" >"$RESULT_DIR/os.diff"
  fi
  if $DO_HOME; then
    nvd diff "$HOME_CURRENT" "$HOME_NEW" >"$RESULT_DIR/home.diff"
  fi

  # If nothing changed with the flake.lock bump skip this upgrade
  if $OS_ONLY_WHEN_CHANGED && $DO_OS && ! $DO_HOME && check_os_change "$RESULT_DIR/os.diff"; then
    echo "Skipping upgrade because NixOS configuration did not change... The diff:"
    cat "$RESULT_DIR/os.diff"
    # Drop the previously created commit
    git reset --soft "$PREV_COMMIT_HASH"
    git restore --source="$PREV_COMMIT_HASH" --staged --worktree flake.lock
    exit 0
  fi

  echo "Attaching metadata via git notes..."
  MSGFILE="$RESULT_DIR/msgfile"
  {
    if $DO_OS; then
      echo "# System closure diff"
      cat "$RESULT_DIR/os.diff"
    fi
    if $DO_HOME; then
      if ! $DO_OS; then
        echo
      fi
      echo "# Home-manager closure diff"
      cat "$RESULT_DIR/home.diff"
    fi
  } >"$MSGFILE"

  # Attach (or replace) the note on the lock commit
  git notes add -m "$(cat "$MSGFILE")" "$LOCK_COMMIT_HASH"

  # Merge the local note into the merged notes
  git notes --ref=refs/notes/commits merge -v refs/notes/local/commits
fi

if $DO_PUSH; then
  echo "Pushing changes..."
  set +e
  success=0
  for i in $(seq 1 5); do
    git pull --rebase

    # Merge the local notes into the merged (potentially new) notes,
    # just in case there was a rebase
    git notes --ref=refs/notes/commits merge -v refs/notes/local/commits

    if git push; then
      echo "Push succeeded."
      success=1
      break
    else
      echo "Push failed (attempt $i), retrying..."
      sleep 1
    fi
  done
  set -e
  if [[ $success -ne 1 ]]; then
    echo "Failed to push after 5 attempts." >&2
    exit 1
  fi
fi
